package ru.example.childwatch

import android.Manifest
import android.content.pm.PackageManager
import android.os.Bundle
import android.util.Log
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import ru.example.childwatch.audio.AudioRecorder
import ru.example.childwatch.databinding.ActivityAudioBinding
import ru.example.childwatch.utils.PermissionHelper
import ru.example.childwatch.ui.AudioVisualizer
import java.io.File

/**
 * Audio Activity for audio monitoring and recording
 * 
 * Features:
 * 1. –ü—Ä–æ—Å–ª—É—à–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ä–µ–±–µ–Ω–∫–∞)
 * 2. –ó–∞–ø–∏—Å—å –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–æ—Å–ª—É—à–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–∞–π–ª–∞
 * - Manual audio recording
 * - Recording status display
 * - Audio file management
 * - Recording controls
 */
class AudioActivity : AppCompatActivity() {
    
    companion object {
        private const val TAG = "AudioActivity"
        private const val AUDIO_PERMISSION_REQUEST_CODE = 1002
    }
    
    private lateinit var binding: ActivityAudioBinding
    private lateinit var audioRecorder: AudioRecorder
    private lateinit var audioVisualizer: AudioVisualizer
    private var isRecording = false
    private var isMonitoring = false
    private var currentAudioFile: File? = null
    
    // –¢–∞–π–º–µ—Ä—ã
    private var monitoringStartTime = 0L
    private var recordingStartTime = 0L
    private var timerRunnable: Runnable? = null
    private var blinkRunnable: Runnable? = null
    private var isBlinking = false
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityAudioBinding.inflate(layoutInflater)
        setContentView(binding.root)
        
        // Initialize audio recorder
        audioRecorder = AudioRecorder(this)
        
        // Initialize audio visualizer
        audioVisualizer = binding.audioVisualizer
        
        // Setup UI
        setupUI()
        updateUI()
    }
    
    private lateinit var filterAdapter: ru.example.childwatch.audio.AudioFilterAdapter

    private fun setupUI() {
        // Set up action bar
        supportActionBar?.setDisplayHomeAsUpEnabled(true)
        supportActionBar?.title = "–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"

        // Monitor button - –ø—Ä–æ—Å–ª—É—à–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        binding.monitorButton.setOnClickListener {
            if (isMonitoring) stopMonitoring() else startMonitoring()
        }

        // Record button - –∑–∞–ø–∏—Å—å –ø—Ä–æ—Å–ª—É—à–∫–∏
        binding.recordButton.setOnClickListener {
            if (isRecording) stopRecording() else startRecording()
        }

        // Test button
        binding.testButton.setOnClickListener { testAudioRecording() }

        // --- –ù–æ–≤—ã–π –±–ª–æ–∫: —Ñ–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ RecyclerView ---
        val filterItems = listOf(
            ru.example.childwatch.audio.AudioFilterItem(
                ru.example.childwatch.audio.AudioEnhancer.FilterMode.ORIGINAL,
                "üì°", "–û—Ä–∏–≥–∏–Ω–∞–ª", "–ë–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏, —á–∏—Å—Ç—ã–π –∑–≤—É–∫"
            ),
            ru.example.childwatch.audio.AudioFilterItem(
                ru.example.childwatch.audio.AudioEnhancer.FilterMode.VOICE,
                "üé§", "–ì–æ–ª–æ—Å", "–£—Å–∏–ª–µ–Ω–∏–µ —Ä–µ—á–∏, —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ"
            ),
            ru.example.childwatch.audio.AudioFilterItem(
                ru.example.childwatch.audio.AudioEnhancer.FilterMode.QUIET_SOUNDS,
                "üîá", "–¢–∏—Ö–∏–µ –∑–≤—É–∫–∏", "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É—Å–∏–ª–µ–Ω–∏–µ"
            ),
            ru.example.childwatch.audio.AudioFilterItem(
                ru.example.childwatch.audio.AudioEnhancer.FilterMode.MUSIC,
                "üéµ", "–ú—É–∑—ã–∫–∞", "–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–≤—É—á–∞–Ω–∏–µ"
            ),
            ru.example.childwatch.audio.AudioFilterItem(
                ru.example.childwatch.audio.AudioEnhancer.FilterMode.OUTDOOR,
                "üå≥", "–£–ª–∏—Ü–∞", "–ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ –∏ —à—É–º–∞"
            )
        )

        val savedMode = getSharedPreferences("audio_prefs", MODE_PRIVATE)
            .getString("filter_mode", ru.example.childwatch.audio.AudioEnhancer.FilterMode.ORIGINAL.name)
        val initialMode = try {
            ru.example.childwatch.audio.AudioEnhancer.FilterMode.valueOf(savedMode ?: ru.example.childwatch.audio.AudioEnhancer.FilterMode.ORIGINAL.name)
        } catch (e: Exception) {
            ru.example.childwatch.audio.AudioEnhancer.FilterMode.ORIGINAL
        }

        filterAdapter = ru.example.childwatch.audio.AudioFilterAdapter(
            items = filterItems,
            selectedMode = initialMode,
            onFilterSelected = { mode ->
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
                getSharedPreferences("audio_prefs", MODE_PRIVATE).edit()
                    .putString("filter_mode", mode.name)
                    .apply()
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∂–∏–º –∫ –∞—É–¥–∏–æ
                updateFilterMode(mode)
                Log.d(TAG, "Filter mode changed to: $mode")
                Toast.makeText(this, "–†–µ–∂–∏–º —Ñ–∏–ª—å—Ç—Ä–∞: ${getModeName(mode)}", Toast.LENGTH_SHORT).show()
            }
        )
        binding.filterRecyclerView.apply {
            layoutManager = androidx.recyclerview.widget.LinearLayoutManager(
                this@AudioActivity,
                androidx.recyclerview.widget.LinearLayoutManager.HORIZONTAL,
                false
            )
            adapter = filterAdapter
            setHasFixedSize(true)
        }
    }

    // loadFilterMode –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω (–ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä)

    private fun updateFilterMode(mode: ru.example.childwatch.audio.AudioEnhancer.FilterMode) {
        // Update AudioPlaybackService if it's running
        if (ru.example.childwatch.service.AudioPlaybackService.isPlaying) {
            try {
                // Send broadcast to update filter mode in real-time
                val intent = android.content.Intent("ru.example.childwatch.UPDATE_FILTER_MODE")
                intent.putExtra("filter_mode", mode.name)
                sendBroadcast(intent)
                Log.d(TAG, "Filter mode broadcast sent: $mode")
            } catch (e: Exception) {
                Log.e(TAG, "Error updating filter mode", e)
            }
        } else {
            Log.d(TAG, "Filter mode will be applied on next playback start")
        }
    }

    private fun getModeName(mode: ru.example.childwatch.audio.AudioEnhancer.FilterMode): String {
        return when (mode) {
            ru.example.childwatch.audio.AudioEnhancer.FilterMode.ORIGINAL -> "–û—Ä–∏–≥–∏–Ω–∞–ª (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤)"
            ru.example.childwatch.audio.AudioEnhancer.FilterMode.VOICE -> "–ì–æ–ª–æ—Å"
            ru.example.childwatch.audio.AudioEnhancer.FilterMode.QUIET_SOUNDS -> "–¢–∏—Ö–∏–µ –∑–≤—É–∫–∏"
            ru.example.childwatch.audio.AudioEnhancer.FilterMode.MUSIC -> "–ú—É–∑—ã–∫–∞"
            ru.example.childwatch.audio.AudioEnhancer.FilterMode.OUTDOOR -> "–£–ª–∏—Ü–∞"
        }
    }
    
    /**
     * 1. –ü—Ä–æ—Å–ª—É—à–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ä–µ–±–µ–Ω–∫–∞)
     */
    private fun startMonitoring() {
        if (!PermissionHelper.hasAudioPermission(this)) {
            requestAudioPermission()
            return
        }

        try {
            Log.d(TAG, "Starting audio monitoring from child device")

            // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            val prefs = getSharedPreferences("childwatch_prefs", MODE_PRIVATE)
            val serverUrl = prefs.getString("server_url", "https://childwatch-production.up.railway.app")
                ?: "https://childwatch-production.up.railway.app"
            val childDeviceId = prefs.getString("child_device_id", "")

            if (childDeviceId.isNullOrEmpty()) {
                Toast.makeText(this, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ ID —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ä–µ–±—ë–Ω–∫–∞", Toast.LENGTH_LONG).show()
                return
            }

            isMonitoring = true

            // –ó–∞–ø—É—Å–∫–∞–µ–º AudioPlaybackService –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ —Å—Ç—Ä–∏–º–∞
            ru.example.childwatch.service.AudioPlaybackService.startPlayback(
                context = this,
                deviceId = childDeviceId,
                serverUrl = serverUrl,
                recording = false
            )

            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —ç–∫–≤–∞–ª–∞–π–∑–µ—Ä
            audioVisualizer.setActive(true)
            audioVisualizer.setRecordingMode(false)

            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
            monitoringStartTime = System.currentTimeMillis()
            startTimer()

            updateUI()
            Toast.makeText(this, "üéß –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Å–ª—É—à–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–µ–±—ë–Ω–∫–∞", Toast.LENGTH_SHORT).show()

            Log.d(TAG, "Audio streaming started for device: $childDeviceId")

        } catch (e: Exception) {
            Log.e(TAG, "Error starting audio monitoring", e)
            Toast.makeText(this, "–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${e.message}", Toast.LENGTH_SHORT).show()
            isMonitoring = false
        }
    }

    private fun stopMonitoring() {
        try {
            Log.d(TAG, "Stopping audio monitoring")
            isMonitoring = false

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º AudioPlaybackService
            ru.example.childwatch.service.AudioPlaybackService.stopPlayback(this)

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–∫–≤–∞–ª–∞–π–∑–µ—Ä
            audioVisualizer.setActive(false)

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
            stopTimer()

            updateUI()
            Toast.makeText(this, "üéß –ü—Ä–æ—Å–ª—É—à–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", Toast.LENGTH_SHORT).show()

        } catch (e: Exception) {
            Log.e(TAG, "Error stopping audio monitoring", e)
            Toast.makeText(this, "–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${e.message}", Toast.LENGTH_SHORT).show()
        }
    }
    
    /**
     * 2. –ó–∞–ø–∏—Å—å –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–æ—Å–ª—É—à–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–∞–π–ª–∞
     */
    private fun startRecording() {
        if (!PermissionHelper.hasAudioPermission(this)) {
            requestAudioPermission()
            return
        }
        
        if (!audioRecorder.isAudioRecordingAvailable()) {
            Toast.makeText(this, "–ê—É–¥–∏–æ –∑–∞–ø–∏—Å—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ", Toast.LENGTH_SHORT).show()
            return
        }
        
        try {
            Log.d(TAG, "Starting audio recording")
            
            // Start recording for 60 seconds (longer for monitoring)
            val audioFile = audioRecorder.startRecording(60)
            
            if (audioFile != null) {
                currentAudioFile = audioFile
                isRecording = true
                recordingStartTime = System.currentTimeMillis()
                
                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –∑–∞–ø–∏—Å–∏ –≤ —ç–∫–≤–∞–ª–∞–π–∑–µ—Ä–µ
                audioVisualizer.setRecordingMode(true)
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ REC
                startBlinking()
                
                updateUI()
                Toast.makeText(this, "üéôÔ∏è –ó–∞–ø–∏—Å—å –ø—Ä–æ—Å–ª—É—à–∫–∏ –Ω–∞—á–∞—Ç–∞", Toast.LENGTH_SHORT).show()
                
                // Auto-stop after 60 seconds
                binding.recordButton.postDelayed({
                    if (isRecording) {
                        stopRecording()
                    }
                }, 60000)
            } else {
                Toast.makeText(this, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å", Toast.LENGTH_SHORT).show()
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "Error starting audio recording", e)
            Toast.makeText(this, "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: ${e.message}", Toast.LENGTH_SHORT).show()
        }
    }
    
    private fun stopRecording() {
        try {
            Log.d(TAG, "Stopping audio recording")
            
            val audioFile = audioRecorder.stopRecording()
            isRecording = false
            currentAudioFile = null
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–≥–∞–Ω–∏–µ
            stopBlinking()
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —ç–∫–≤–∞–ª–∞–π–∑–µ—Ä–∞
            audioVisualizer.setRecordingMode(false)
            
            updateUI()
            
            if (audioFile != null && audioFile.exists() && audioFile.length() > 0) {
                val fileSizeKB = audioFile.length() / 1024
                Toast.makeText(this, "üéôÔ∏è –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${audioFile.name} (${fileSizeKB}KB)", Toast.LENGTH_LONG).show()
                Log.d(TAG, "Audio file created: ${audioFile.absolutePath}, size: ${audioFile.length()} bytes")
            } else {
                Toast.makeText(this, "–ó–∞–ø–∏—Å—å –Ω–µ —É–¥–∞–ª–∞—Å—å", Toast.LENGTH_SHORT).show()
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "Error stopping audio recording", e)
            Toast.makeText(this, "–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏: ${e.message}", Toast.LENGTH_SHORT).show()
        }
    }
    
    private fun testAudioRecording() {
        if (!PermissionHelper.hasAudioPermission(this)) {
            requestAudioPermission()
            return
        }
        
        if (!audioRecorder.isAudioRecordingAvailable()) {
            Toast.makeText(this, "–ê—É–¥–∏–æ –∑–∞–ø–∏—Å—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", Toast.LENGTH_SHORT).show()
            return
        }
        
        Toast.makeText(this, "–ê—É–¥–∏–æ –∑–∞–ø–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é", Toast.LENGTH_SHORT).show()
        Log.d(TAG, "Audio recording test passed")
    }
    
    private fun updateUI() {
        // Update monitoring button
        if (isMonitoring) {
            binding.monitorButton.text = "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ"
            binding.monitorButton.setIconResource(android.R.drawable.ic_media_pause)
        } else {
            binding.monitorButton.text = "–í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ"
            binding.monitorButton.setIconResource(android.R.drawable.ic_media_play)
        }
        
        // Update recording button
        if (isRecording) {
            binding.recordButton.text = "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"
            binding.recordButton.setIconResource(android.R.drawable.ic_media_pause)
        } else {
            binding.recordButton.text = "–ó–∞–ø–∏—Å–∞—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ"
            binding.recordButton.setIconResource(android.R.drawable.ic_media_play)
        }
        
        // Update status text
        val statusText = buildString {
            when {
                isMonitoring && isRecording -> {
                    appendLine("üéß –ü—Ä–æ—Å–ª—É—à–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞")
                    appendLine("üéôÔ∏è –ó–∞–ø–∏—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...")
                    appendLine("–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –∑–∞–ø–∏—Å—å—é")
                }
                isMonitoring -> {
                    appendLine("üéß –ü—Ä–æ—Å–ª—É—à–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞")
                    appendLine("–°—Ç–∞—Ç—É—Å: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑ –∑–∞–ø–∏—Å–∏")
                }
                isRecording -> {
                    appendLine("üéôÔ∏è –ó–∞–ø–∏—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...")
                    appendLine("–°—Ç–∞—Ç—É—Å: –¢–æ–ª—å–∫–æ –∑–∞–ø–∏—Å—å")
                }
                else -> {
                    appendLine("–°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                    appendLine("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
                    appendLine("‚Ä¢ –ü—Ä–æ—Å–ª—É—à–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
                    appendLine("‚Ä¢ –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ")
                }
            }
        }
        
        binding.statusText.text = statusText
        
        // Update colors
        val statusColor = when {
            isMonitoring || isRecording -> android.R.color.holo_red_dark
            else -> android.R.color.holo_green_dark
        }
        binding.statusText.setTextColor(ContextCompat.getColor(this, statusColor))
        
        // Update visualizer status
        val visualizerStatus = when {
            isMonitoring && isRecording -> "üéµ –≠–∫–≤–∞–ª–∞–π–∑–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω (–∑–∞–ø–∏—Å—å)"
            isMonitoring -> "üéµ –≠–∫–≤–∞–ª–∞–π–∑–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω (–ø—Ä–æ—Å–ª—É—à–∫–∞)"
            else -> "üéµ –≠–∫–≤–∞–ª–∞–π–∑–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
        }
        binding.visualizerStatusText.text = visualizerStatus
    }
    
    private fun requestAudioPermission() {
        ActivityCompat.requestPermissions(
            this,
            arrayOf(Manifest.permission.RECORD_AUDIO),
            AUDIO_PERMISSION_REQUEST_CODE
        )
    }
    
    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        
        if (requestCode == AUDIO_PERMISSION_REQUEST_CODE) {
            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                Toast.makeText(this, "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∞—É–¥–∏–æ –∑–∞–ø–∏—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", Toast.LENGTH_SHORT).show()
            } else {
                Toast.makeText(this, "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∞—É–¥–∏–æ –∑–∞–ø–∏—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã", Toast.LENGTH_LONG).show()
            }
        }
    }
    
    override fun onSupportNavigateUp(): Boolean {
        onBackPressed()
        return true
    }
    
    override fun onDestroy() {
        super.onDestroy()
        if (isRecording) {
            stopRecording()
        }
        if (isMonitoring) {
            stopMonitoring()
        }
        stopTimer()
        stopBlinking()
        // audioRecorder.cleanup() - cleanup is private, skip for now
    }
    
    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    private fun startTimer() {
        monitoringStartTime = System.currentTimeMillis()
        timerRunnable = object : Runnable {
            override fun run() {
                if (isMonitoring) {
                    updateTimerDisplay()
                    binding.recordButton.postDelayed(this, 1000) // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                }
            }
        }
        timerRunnable?.run()
    }
    
    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    private fun stopTimer() {
        timerRunnable?.let { binding.recordButton.removeCallbacks(it) }
        timerRunnable = null
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
     */
    private fun updateTimerDisplay() {
        val elapsedTime = System.currentTimeMillis() - monitoringStartTime
        val minutes = (elapsedTime / 60000).toInt()
        val seconds = ((elapsedTime % 60000) / 1000).toInt()
        
        val timeString = String.format("%02d:%02d", minutes, seconds)
        binding.timerText.text = "–í—Ä–µ–º—è –ø—Ä–æ—Å–ª—É—à–∫–∏: $timeString"
    }
    
    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–≥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ REC
     */
    private fun startBlinking() {
        isBlinking = true
        blinkRunnable = object : Runnable {
            override fun run() {
                if (isBlinking && isRecording) {
                    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
                    binding.recordButton.alpha = if (binding.recordButton.alpha < 0.5f) 1.0f else 0.3f
                    binding.recordButton.postDelayed(this, 500) // –ú–∏–≥–∞–µ–º –∫–∞–∂–¥—ã–µ 500–º—Å
                }
            }
        }
        blinkRunnable?.run()
    }
    
    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∏–≥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ REC
     */
    private fun stopBlinking() {
        isBlinking = false
        blinkRunnable?.let { binding.recordButton.removeCallbacks(it) }
        binding.recordButton.alpha = 1.0f // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—É—é –≤–∏–¥–∏–º–æ—Å—Ç—å
    }
}
